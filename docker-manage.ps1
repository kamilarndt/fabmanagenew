# FabManage Docker Management Script
# PowerShell script for Windows

param(
    [Parameter(Mandatory = $true)]
    [ValidateSet("dev", "prod", "build", "stop", "clean", "logs", "restart")]
    [string]$Action,
    
    [string]$Service = ""
)

$ProjectRoot = $PSScriptRoot
$DockerComposeFile = Join-Path $ProjectRoot "FabManageNew\docker-compose.yml"

function Write-Info {
    param([string]$Message)
    Write-Host "üê≥ $Message" -ForegroundColor Cyan
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

# Check if Docker is running
function Test-Docker {
    try {
        docker info | Out-Null
        return $true
    }
    catch {
        Write-Error "Docker nie jest uruchomiony. Uruchom Docker Desktop i spr√≥buj ponownie."
        return $false
    }
}

# Check if docker-compose file exists
if (-not (Test-Path $DockerComposeFile)) {
    Write-Error "Nie znaleziono pliku docker-compose.yml w: $DockerComposeFile"
    exit 1
}

if (-not (Test-Docker)) {
    exit 1
}

Set-Location (Split-Path $DockerComposeFile -Parent)

switch ($Action) {
    "dev" {
        Write-Info "Uruchamianie ≈õrodowiska deweloperskiego..."
        docker-compose up -d
        if ($LASTEXITCODE -eq 0) {
            Write-Success "≈örodowisko deweloperskie uruchomione!"
            Write-Host ""
            Write-Host "üåê Frontend:  http://localhost:5173"
            Write-Host "üîß Backend:   http://localhost:3001"
            Write-Host "üìä Health:    http://localhost:3001/health"
            Write-Host ""
            Write-Host "Aby zatrzymaƒá: .\docker-manage.ps1 stop"
            Write-Host "Aby zobaczyƒá logi: .\docker-manage.ps1 logs"
        }
    }
    
    "prod" {
        Write-Info "Uruchamianie ≈õrodowiska produkcyjnego..."
        $ProdComposeFile = Join-Path $ProjectRoot "docker\docker-compose.yml"
        if (Test-Path $ProdComposeFile) {
            docker-compose -f $ProdComposeFile up -d
            Write-Success "≈örodowisko produkcyjne uruchomione!"
        }
        else {
            Write-Error "Nie znaleziono pliku docker-compose.yml dla ≈õrodowiska produkcyjnego"
        }
    }
    
    "build" {
        Write-Info "Przebudowywanie obraz√≥w Docker..."
        if ($Service) {
            docker-compose build --no-cache $Service
        }
        else {
            docker-compose build --no-cache
        }
        Write-Success "Obrazy zosta≈Çy przebudowane!"
    }
    
    "stop" {
        Write-Info "Zatrzymywanie kontener√≥w..."
        docker-compose down
        Write-Success "Kontenery zatrzymane!"
    }
    
    "clean" {
        Write-Info "Czyszczenie kontener√≥w i obraz√≥w..."
        docker-compose down -v --rmi all
        docker system prune -f
        Write-Success "≈örodowisko zosta≈Ço wyczyszczone!"
    }
    
    "logs" {
        if ($Service) {
            Write-Info "Pokazywanie log√≥w dla serwisu: $Service"
            docker-compose logs -f $Service
        }
        else {
            Write-Info "Pokazywanie log√≥w wszystkich serwis√≥w..."
            docker-compose logs -f
        }
    }
    
    "restart" {
        Write-Info "Restartowanie kontener√≥w..."
        if ($Service) {
            docker-compose restart $Service
            Write-Success "Serwis $Service zosta≈Ç zrestartowany!"
        }
        else {
            docker-compose restart
            Write-Success "Wszystkie serwisy zosta≈Çy zrestartowane!"
        }
    }
}

# Return to original directory
Set-Location $ProjectRoot