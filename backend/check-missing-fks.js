const db = require('./db.js')

try {
    db.init()
    const d = db.getDb()
    
    console.log('=== SPRAWDZENIE BRAKUJƒÑCYCH POWIƒÑZA≈É ===\n')
    
    // Sprawd≈∫ demands - powinna mieƒá FK do materials, projects, tiles
    console.log('üîç SPRAWDZANIE TABELI DEMANDS:')
    const demandsFks = d.prepare("SELECT * FROM pragma_foreign_key_list('demands')").all()
    console.log('Obecne FK:', demandsFks)
    
    if (demandsFks.length === 0) {
        console.log('‚ùå Tabela demands NIE MA ≈ºadnych kluczy obcych!')
        console.log('   Powinna mieƒá:')
        console.log('   - material_id ‚Üí materials.id')
        console.log('   - project_id ‚Üí projects.id') 
        console.log('   - tile_id ‚Üí tiles.id')
    }
    
    // Sprawd≈∫ czy demands ma odpowiednie kolumny
    console.log('\nüìã KOLUMNY W DEMANDS:')
    const demandsColumns = d.prepare("PRAGMA table_info(demands)").all()
    demandsColumns.forEach(col => console.log(`  - ${col.name} (${col.type})`))
    
    // Sprawd≈∫ integralno≈õƒá danych
    console.log('\nüîç SPRAWDZENIE INTEGRALNO≈öCI:')
    
    // Demands bez materia≈Ç√≥w
    const orphanDemands = d.prepare(`
        SELECT d.id, d.name, d.material_id
        FROM demands d
        LEFT JOIN materials m ON d.material_id = m.id
        WHERE m.id IS NULL AND d.material_id IS NOT NULL
    `).all()
    
    if (orphanDemands.length > 0) {
        console.log(`‚ùå Demands z nieistniejƒÖcymi materia≈Çami: ${orphanDemands.length}`)
    } else {
        console.log('‚úÖ Wszystkie demands majƒÖ poprawne materia≈Çy')
    }
    
    // Sprawd≈∫ inne potencjalne problemy
    console.log('\nüîç INNE SPRAWDZENIA:')
    
    // Projekty bez klient√≥w
    const orphanProjects = d.prepare(`
        SELECT p.id, p.name, p.client_id 
        FROM projects p 
        LEFT JOIN clients c ON p.client_id = c.id 
        WHERE c.id IS NULL
    `).all()
    
    if (orphanProjects.length > 0) {
        console.log(`‚ùå Projekty bez klient√≥w: ${orphanProjects.length}`)
    } else {
        console.log('‚úÖ Wszystkie projekty majƒÖ klient√≥w')
    }
    
    // Kafelki bez projekt√≥w
    const orphanTiles = d.prepare(`
        SELECT t.id, t.name, t.project_id 
        FROM tiles t 
        LEFT JOIN projects p ON t.project_id = p.id 
        WHERE p.id IS NULL
    `).all()
    
    if (orphanTiles.length > 0) {
        console.log(`‚ùå Kafelki bez projekt√≥w: ${orphanTiles.length}`)
    } else {
        console.log('‚úÖ Wszystkie kafelki majƒÖ projekty')
    }
    
    // Materia≈Çy w kafelkach bez istniejƒÖcych materia≈Ç√≥w
    const orphanTileMaterials = d.prepare(`
        SELECT tm.tile_id, tm.material_id, t.name as tile_name
        FROM tile_materials tm
        LEFT JOIN materials m ON tm.material_id = m.id
        LEFT JOIN tiles t ON tm.tile_id = t.id
        WHERE m.id IS NULL
    `).all()
    
    if (orphanTileMaterials.length > 0) {
        console.log(`‚ùå Kafelki z nieistniejƒÖcymi materia≈Çami: ${orphanTileMaterials.length}`)
    } else {
        console.log('‚úÖ Wszystkie materia≈Çy w kafelkach istniejƒÖ')
    }
    
    console.log('\n=== REKOMENDACJE ===\n')
    
    if (demandsFks.length === 0) {
        console.log('üîß NALE≈ªY DODAƒÜ KLUCZE OBCE DO DEMANDS:')
        console.log('   ALTER TABLE demands ADD CONSTRAINT fk_demands_material FOREIGN KEY (material_id) REFERENCES materials(id)')
        console.log('   ALTER TABLE demands ADD CONSTRAINT fk_demands_project FOREIGN KEY (project_id) REFERENCES projects(id)')
        console.log('   ALTER TABLE demands ADD CONSTRAINT fk_demands_tile FOREIGN KEY (tile_id) REFERENCES tiles(id)')
    }
    
    d.close()
} catch (error) {
    console.error('‚ùå B≈ÇƒÖd:', error.message)
}

