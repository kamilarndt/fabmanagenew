# Docker Compose configuration for FabManage-Clean
# Complete development and production environment

version: '3.8'

services:
  # ==============================================
  # APPLICATION
  # ==============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - fabmanage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==============================================
  # DATABASE
  # ==============================================
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: fabmanage
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./supabase/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - fabmanage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==============================================
  # REDIS (CACHE & SESSIONS)
  # ==============================================
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fabmanage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ==============================================
  # SUPABASE (LOCAL DEVELOPMENT)
  # ==============================================
  supabase:
    image: supabase/postgres:15.1.0.117
    ports:
      - "54321:5432"
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: 5432
      POSTGRES_PORT: 5432
      PGPASSWORD: postgres
      POSTGRES_PASSWORD: postgres
      PGDATABASE: postgres
      POSTGRES_DB: postgres
      PGUSER: postgres
      POSTGRES_USER: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - supabase_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    networks:
      - fabmanage-network
    restart: unless-stopped

  # ==============================================
  # NGINX (REVERSE PROXY)
  # ==============================================
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - fabmanage-network
    restart: unless-stopped

  # ==============================================
  # MONITORING
  # ==============================================
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fabmanage-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - fabmanage-network
    restart: unless-stopped

  # ==============================================
  # DEVELOPMENT SERVICES
  # ==============================================
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_SUPABASE_URL=http://localhost:54321
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - fabmanage-network
    profiles:
      - dev

  # ==============================================
  # TESTING SERVICES
  # ==============================================
  test-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: fabmanage_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - fabmanage-network
    profiles:
      - test

  app-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://postgres:postgres@test-db:5432/fabmanage_test
    depends_on:
      - test-db
    networks:
      - fabmanage-network
    profiles:
      - test

  # ==============================================
  # UTILITIES
  # ==============================================
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - fabmanage-network
    profiles:
      - dev

  # ==============================================
  # VOLUMES
  # ==============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  supabase_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==============================================
# NETWORKS
# ==============================================
networks:
  fabmanage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
