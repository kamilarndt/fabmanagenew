import { z } from "zod";

/**
 * Client validation schema using Zod
 * Ensures type safety and validation for client data
 */
export const clientSchema = z.object({
  name: z
    .string()
    .min(1, "Nazwa klienta jest wymagana")
    .max(100, "Nazwa klienta nie może być dłuższa niż 100 znaków"),

  email: z
    .string()
    .email("Nieprawidłowy adres email")
    .optional()
    .or(z.literal("")),

  phone: z.string().optional().or(z.literal("")),

  companyName: z
    .string()
    .max(100, "Nazwa firmy nie może być dłuższa niż 100 znaków")
    .optional()
    .or(z.literal("")),

  address: z
    .string()
    .max(200, "Adres nie może być dłuższy niż 200 znaków")
    .optional()
    .or(z.literal("")),

  notes: z
    .string()
    .max(500, "Notatki nie mogą być dłuższe niż 500 znaków")
    .optional()
    .or(z.literal("")),
});

/**
 * TypeScript type derived from the schema
 */
export type ClientFormData = z.infer<typeof clientSchema>;

/**
 * Client creation payload for API
 */
export const clientCreateSchema = clientSchema.extend({
  id: z.string().optional(), // ID will be generated by backend if not provided
});

export type ClientCreateData = z.infer<typeof clientCreateSchema>;

/**
 * Validation helper function
 */
export function validateClientData(data: unknown): ClientFormData {
  return clientSchema.parse(data);
}

/**
 * Validation helper with error handling
 */
export function safeValidateClientData(data: unknown): {
  success: boolean;
  data?: ClientFormData;
  errors?: z.ZodError;
} {
  try {
    const validatedData = clientSchema.parse(data);
    return { success: true, data: validatedData };
  } catch (error) {
    if (error instanceof z.ZodError) {
      return { success: false, errors: error };
    }
    throw error;
  }
}
